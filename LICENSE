#include <iostream>
#include <fstream>
#include <sstream>
#include <string>
#include <vector>
#include <map>
#include <optional>
#include <cmath>
#include "Fractures.hpp"
#include "Utils.hpp"

using namespace std;
using namespace FractureLibrary;

struct Punto {
    double x, y, z;
};

struct Fracture {
    int id;
    vector<Punto> vertices;
};

// Funzione di utilit√† per calcolare il vettore normale di un piano definito da tre punti
Punto calcolaNormale(const Punto& p1, const Punto& p2, const Punto& p3) {
    Punto u = {p2.x - p1.x, p2.y - p1.y, p2.z - p1.z};
    Punto v = {p3.x - p1.x, p3.y - p1.y, p3.z - p1.z};
    Punto normale = {
        u.y * v.z - u.z * v.y,
        u.z * v.x - u.x * v.z,
        u.x * v.y - u.y * v.x
    };
    return normale;
}

// Funzione per calcolare il prodotto scalare tra due vettori
double dotProduct(const Punto& u, const Punto& v) {
    return u.x * v.x + u.y * v.y + u.z * v.z;
}

// Funzione per calcolare il prodotto vettoriale tra due vettori
Punto crossProduct(const Punto& u, const Punto& v) {
    return {
        u.y * v.z - u.z * v.y,
        u.z * v.x - u.x * v.z,
        u.x * v.y - u.y * v.x
    };
}

// Funzione per trovare l'intersezione tra un segmento e una linea definita dal vettore t
std::optional<Punto> intersezioneLineaSegmento(const Punto& t, const Punto& s1, const Punto& s2) {
    Punto direction = {s2.x - s1.x, s2.y - s1.y, s2.z - s1.z};
    Punto w = {-s1.x, -s1.y, -s1.z};
    double denom = dotProduct(crossProduct(direction, t), crossProduct(direction, t));
    if (denom == 0.0) return std::nullopt; // Linea e segmento sono paralleli
    double t_param = dotProduct(crossProduct(w, direction), crossProduct(direction, t)) / denom;
    if (t_param >= 0.0 && t_param <= 1.0) {
        return Punto{
            s1.x + t_param * direction.x,
            s1.y + t_param * direction.y,
            s1.z + t_param * direction.z
        };
    }
    return std::nullopt;
}

// Funzione per calcolare le intersezioni tra i segmenti dei poligoni
std::vector<Punto> calcolaIntersezioni(const std::vector<Punto>& vertici1, const Punto& normale1, const std::vector<Punto>& vertici2, const Punto& normale2) {
    std::vector<Punto> intersezioni;
    
    Punto t = crossProduct(normale1, normale2); // Direzione della linea di intersezione
    if (dotProduct(t, t) == 0.0) return intersezioni; // I piani sono paralleli
    
    // Trova le intersezioni tra la linea e i bordi dei poligoni
    for (size_t i = 0; i < vertici1.size(); ++i) {
        auto intersezione = intersezioneLineaSegmento(t, vertici1[i], vertici1[(i + 1) % vertici1.size()]);
        if (intersezione) intersezioni.push_back(*intersezione);
    }
    for (size_t i = 0; i < vertici2.size(); ++i) {
        auto intersezione = intersezioneLineaSegmento(t, vertici2[i], vertici2[(i + 1) % vertici2.size()]);
        if (intersezione) intersezioni.push_back(*intersezione);
    }

    return intersezioni;
}

// Funzione per importare i dati delle fratture da un file
bool ImportFractures(const string& filename, vector<Fracture>& fractures) {
    ifstream file(filename);
    if (!file.is_open()) {
        return false;
    }

    string line;
    while (getline(file, line)) {
        if (line.find("# Number of Fractures") != string::npos) {
            continue;
        }
        if (line.find("# FractureId; NumVertices") != string::npos) {
            Fracture fracture;
            file >> fracture.id;
            int numVertices;
            file >> numVertices;
            fracture.vertices.resize(numVertices);
            for (int i = 0; i < numVertices; ++i) {
                file >> fracture.vertices[i].x >> fracture.vertices[i].y >> fracture.vertices[i].z;
            }
            fractures.push_back(fracture);
        }
    }

    file.close();
    return true;
}

// Funzione per verificare le intersezioni tra le fratture
void verificaIntersezioni(const vector<Fracture>& fractures, map<int, vector<int>>& intersezioni) {
    for (size_t i = 0; i < fractures.size(); ++i) {
        Punto normale1 = calcolaNormale(fractures[i].vertices[0], fractures[i].vertices[1], fractures[i].vertices[2]);
        for (size_t j = i + 1; j < fractures.size(); ++j) {
            Punto normale2 = calcolaNormale(fractures[j].vertices[0], fractures[j].vertices[1], fractures[j].vertices[2]);
            vector<Punto> intersezioni_frattura = calcolaIntersezioni(fractures[i].vertices, normale1, fractures[j].vertices, normale2);
            if (!intersezioni_frattura.empty()) {
                intersezioni[fractures[i].id].push_back(fractures[j].id);
                intersezioni[fractures[j].id].push_back(fractures[i].id);
            }
        }
    }
}

int main()
{
    string filepath = "/mnt/data/";
    vector<string> filenames = {"FR3_data.txt", "FR10_data.txt", "FR50_data.txt"};

    for (const auto& filename : filenames)
    {
        vector<Fracture> fractures;

        if (!ImportFractures(filepath + filename, fractures))
        {
            cerr << "Errore durante l'importazione delle fratture da " << filename << endl;
            return 1;
        }

        map<int, vector<int>> intersezioni_file;
        verificaIntersezioni(fractures, intersezioni_file);

        cout << "Intersezioni per il file " << filename << ":" << endl;
        for (const auto& entry : intersezioni_file)
        {
            int id = entry.first;
            const vector<int>& intersezioni = entry.second;

            cout << "Frattura " << id << " interseca con: ";
            for (int intersected_id : intersezioni)
            {
                cout << intersected_id << " ";
            }
            cout << endl;
        }
    
 // Calcola le intersezioni tra le fratture
    std::vector<Punto> intersezioni = calcolaIntersezioni(vertici1, normale1, vertici2, normale2);

    // Stampa i risultati delle intersezioni
    std::cout << "Intersezioni trovate:\n";
    for (const auto& intersezione : intersezioni) {
        std::cout << "Punto: (" << intersezione.x << ", " << intersezione.y << ", " << intersezione.z << ")\n";
    }


    return 0;
}



    


